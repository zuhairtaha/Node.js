{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/index.js","webpack:///./src/libs/Contact.js","webpack:///./src/libs/Courses.js","webpack:///./src/libs/Student.js","webpack:///./src/libs/Teacher.js","webpack:///./src/userInterfaceLibs/ContactsList.js","webpack:///./src/userInterfaceLibs/StudentsList.js","webpack:///./src/userInterfaceLibs/TeachersList.js","webpack:///./src/userInterfaceLibs/render.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,kDAA0C,gCAAgC;AAC1E;AACA;;AAEA;AACA;AACA;AACA,gEAAwD,kBAAkB;AAC1E;AACA,yDAAiD,cAAc;AAC/D;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAyC,iCAAiC;AAC1E,wHAAgH,mBAAmB,EAAE;AACrI;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;;AAGA;AACA;;;;;;;;;;;;;AClFA;AAAA;AAAA;AAAA;AAAA;AAAuC;AACA;AACc;AACd;;AAEvC;;AAEA;AACA,iBAAiB,qDAAO;AACxB,oBAAoB,qDAAO;AAC3B,mBAAmB,qDAAO;AAC1B,qBAAqB,qDAAO;AAC5B,kBAAkB,qDAAO;AACzB,mBAAmB,qDAAO;AAC1B,wBAAwB,qDAAO;AAC/B;;AAEA;AACA,mBAAmB,qDAAO;AAC1B,oBAAoB,qDAAO;AAC3B,oBAAoB,qDAAO;AAC3B,gBAAgB,qDAAO;AACvB,iBAAiB,qDAAO;AACxB;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,eAAe,YAAY,cAAc,uBAAuB;AAChE,eAAe,aAAa,cAAc,wBAAwB;AAClE,eAAe,UAAU,cAAc,qBAAqB;AAC5D,eAAe,SAAS,cAAc,oBAAoB;AAC1D,eAAe,aAAa,cAAc,wBAAwB;;AAElE;AACA,mFAAgC,CAAC,qDAAO;AACxC,iFAA8B;AAC9B,iFAA8B;;;;;;;;;;;;;AC5D9B;AAAA;AAAO;AACP;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;ACjBA;AAAA;AAAO;;AAEP;AACA;AACA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;;ACTA;AAAA;AAAA;AAAA;AAAkC;AACA;;AAE3B,sBAAsB,gDAAO;AACpC;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,gBAAgB;AAC/B;AACA;AACA;AACA,gBAAgB,gDAAO;AACvB;AACA,6BAA6B,OAAO,uBAAuB,UAAU;AACrE,iBAAiB;AACjB;AACA;AACA;AACA,aAAa;AACb,2CAA2C,OAAO;AAClD;AACA,SAAS;AACT;;AAEA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,iDAAiD,gDAAO;AACxD;AACA,C;;;;;;;;;;;;ACzCA;AAAA;AAAA;AAAA;AAAkC;AACA;;AAE3B,sBAAsB,gDAAO;AACpC;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB;AACA;AACA;AACA,YAAY,gDAAO;AACnB;AACA,SAAS;AACT,uCAAuC,OAAO;AAC9C;AACA;AACA;;AAEA;AACA;AACA,eAAe,kBAAkB;AACjC;AACA;AACA;AACA;AACA,gCAAgC,aAAa;AAC7C,aAAa;AACb;AACA;AACA;AACA;AACA,gDAAgD,aAAa,iBAAiB,YAAY,iBAAiB,UAAU;AACrH;AACA;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA;AACA;AACA,2BAA2B,UAAU;AACrC,SAAS;AACT;AACA,2BAA2B,UAAU,eAAe,qBAAqB;AACzE;AACA;AACA,C;;;;;;;;;;;;AClDA;AAAA;AAAA;AAAwC;;AAEjC;AACP;AACA;AACA;AACA,uBAAuB,qDAAO;AAC9B;;AAEA;AACA;AACA,eAAe,QAAQ;AACvB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA,4BAA4B,kBAAkB,0BAA0B,kBAAkB;AAC1F;AACA;AACA,8BAA8B,kBAAkB,iBAAiB,aAAa;AAC9E;AACA;AACA,8BAA8B,kBAAkB,kBAAkB,cAAc;AAChF;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB,eAAe,OAAO;AACtB,iBAAiB,OAAO;AACxB;AACA;AACA;AACA;;AAEA;AACA;AACA,eAAe,OAAO;AACtB;AACA;AACA;AACA;AACA,mDAAmD,kBAAkB;AACrE;AACA;AACA;AACA;AACA;AACA,C;;;;;;;;;;;;ACnDA;AAAA;AAAA;AAAA;AAAwC;AACI;;AAErC,2BAA2B,0DAAY;AAC9C;AACA;AACA;AACA,uBAAuB,qDAAO;AAC9B;AACA,C;;;;;;;;;;;;ACTA;AAAA;AAAA;AAAA;AAAwC;AACI;;AAErC,2BAA2B,0DAAY;AAC9C;AACA;AACA;AACA,uBAAuB,qDAAO;AAC9B;AACA,C;;;;;;;;;;;;ACTA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA4C;AACJ;AACI;AACJ;AACA;;AAExC;AACA;AACA,mBAAmB,0DAAY;;AAE/B;AACA,mBAAmB,0DAAY;;AAE/B;AACA;AACA;AACA,WAAW,UAAU;AACrB;AACO;AACP;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA,WAAW,UAAU;AACrB;AACO;AACP;AACA;AACA;AACA,KAAK;AACL;;AAEA;;AAEA;AACA;AACA,WAAW,SAAS;AACpB;AACO;AACP;AACA;AACA,kCAAkC,OAAO;AACzC,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,OAAO;AAClB,WAAW,OAAO;AAClB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,YAAY,kBAAkB,QAAQ;AACxE,uDAAuD,MAAM;AAC7D,qEAAqE,MAAM,IAAI,QAAQ;AACvF;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8DAA8D,eAAe;AAC7E,kEAAkE,aAAa;AAC/E,SAAS;AACT;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA,WAAW,SAAS;AACpB,WAAW,OAAO;AAClB,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B,OAAO,kBAAkB,YAAY;AAClE,iDAAiD,MAAM;AACvD,gEAAgE,MAAM,IAAI,OAAO;AACjF;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,qDAAO;AACvC;AACA;AACA,qCAAqC,aAAa;AAClD,SAAS;AACT;AACA;AACA,KAAK;AACL;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;;AAEL;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA;AACA,qDAAqD,aAAa;AAClE;AACA,4BAA4B,SAAS;AACrC,6BAA6B,SAAS;AACtC,cAAc,SAAS;AACvB;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA,gEAAgE,OAAO;AACvE,iDAAiD,aAAa;AAC9D;AACA;AACA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA,mEAAmE,aAAa;AAChF,gDAAgD,aAAa;AAC7D;AACA;;AAEA;AACA;AACA,+FAA+F;AAC/F,WAAW,QAAQ;AACnB;AACA;AACA,4DAA4D,aAAa;AACzE;AACA,0CAA0C,aAAa;AACvD;AACA;AACA,8DAA8D,aAAa;AAC3E,gEAAgE,cAAc;AAC9E;AACA,sBAAsB,eAAe;AACrC;AACA;AACA,wCAAwC,aAAa;AACrD;AACA,kDAAkD,kBAAkB;AACpE;AACA;AACA,8DAA8D,aAAa;AAC3E;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,WAAW,QAAQ;AACnB;AACA;AACA,yDAAyD,OAAO;AAChE;AACA,2CAA2C,aAAa;AACxD;AACA;AACA,8DAA8D,aAAa;AAC3E,gEAAgE,cAAc;AAC9E;AACA;AACA,4CAA4C,aAAa;AACzD;AACA;AACA;AACA,8CAA8C,iBAAiB;;AAE/D,iDAAiD,aAAa;AAC9D;AACA,wCAAwC,wBAAwB;AAChE,yCAAyC,wBAAwB;AACjE,0BAA0B,wBAAwB;AAClD;AACA;;AAEA;AACA;AACA,8DAA8D,aAAa;AAC3E;AACA;AACA;;AAEA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,qDAAO;AACvC;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gCAAgC,qDAAO;AACvC;AACA;AACA,SAAS;AACT;AACA;AACA;AACA","file":"index.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","import {Student} from \"./libs/Student\";\r\nimport {Teacher} from \"./libs/Teacher\";\r\nimport * as render from './userInterfaceLibs/render';\r\nimport {Courses} from \"./libs/Courses\";\r\n\r\n// ====================== Console test ======================\r\n\r\n// teachers:\r\nconst abed = new Teacher('Abed Sujan', '+4523655222', 'HTML&CSS');\r\nconst pcatana = new Teacher('Petru Catana', '+4523111322', 'HTML&CSS');\r\nconst pankaj = new Teacher('Pankaj', '+4523111222', 'JavaScript-Basics');\r\nconst benna100 = new Teacher('Benjamin', '+4523123123', 'JavaScript-Advanced');\r\nconst marco = new Teacher('Marco', '+4523232323', 'NodeJS');\r\nconst jounes = new Teacher('Jounes', '+4523777000', 'React');\r\nconst christopher = new Teacher('Christopher', '+4523333111', 'FinalProject');\r\nconst teachersArray = [abed, pcatana, pankaj, benna100, marco, jounes, christopher];\r\n\r\n// students\r\nconst zuhair = new Student('Zuhair', '+4591491462');\r\nconst krishna = new Student('Krishna Rana', '+459555222');\r\nconst zeeshan = new Student('Zeeshan', '+459555111');\r\nconst anu = new Student('Anuradha', '+4590001444');\r\nconst zoey = new Student('Zoey Zou', '+4590001666');\r\nconst studentsArray = [zuhair, krishna, zeeshan, anu, zoey];\r\n\r\n// add courses to students\r\nzuhair.addCourses('JavaScript-Advanced');\r\nkrishna.addCourses('HTML&CSS', 'JavaScript-Basics');\r\nzoey.addCourses('HTML&CSS', 'JavaScript-Basics', 'JavaScript-Advanced');\r\nanu.addCourses('HTML&CSS', 'JavaScript-Basics', 'JavaScript-Advanced', 'NodeJS');\r\nzeeshan.addCourses('HTML&CSS', 'JavaScript-Basics', 'JavaScript-Advanced', 'NodeJS', 'Databases', 'React', 'FinalProject');\r\n\r\n// add students to teachers\r\nabed.addStudent(krishna, anu, zeeshan);\r\npcatana.addStudent(krishna);\r\npankaj.addStudent(anu, zoey);\r\nbenna100.addStudent(zuhair);\r\nmarco.addStudent(anu);\r\njounes.addStudent(zeeshan);\r\nchristopher.addStudent(zeeshan);\r\n\r\n// show teachers students\r\nabed.showStudents();\r\npcatana.showStudents();\r\npankaj.showStudents();\r\nbenna100.showStudents();\r\nmarco.showStudents();\r\njounes.showStudents();\r\nchristopher.showStudents();\r\n\r\n// students progresses\r\nconsole.log(`${zuhair.name} progress = ${zuhair.countProgress()} %`);\r\nconsole.log(`${krishna.name} progress = ${krishna.countProgress()} %`);\r\nconsole.log(`${zoey.name} progress = ${zoey.countProgress()} %`);\r\nconsole.log(`${anu.name} progress = ${anu.countProgress()} %`);\r\nconsole.log(`${zeeshan.name} progress = ${zeeshan.countProgress()} %`);\r\n\r\n// ====================== User Interface ======================\r\nrender.renderCoursesDropDownMenu(Courses.all);\r\nrender.insertIntoTeachersTable(teachersArray);\r\nrender.insertIntoStudentsTable(studentsArray);\r\n","export class Contact {\n    /**\n     * contact\n     * @param {String} name - contact name (required)\n     * @param {String} phone - at least 8 characters\n     */\n    constructor(name, phone) {\n        if (arguments.length !== 2) throw \"Error: wrong number of arguments\";\n        if (typeof name !== 'string' || name.length === 0) {\n            throw \"Error: name is not a string or is too short\";\n        }\n        if (typeof phone !== 'string' || phone.length < 8) {\n            throw \"Error: phone is not a string or is too short\";\n        }\n        this.name = name;\n        this.phone = phone;\n    }\n}","export class Courses {\r\n\r\n    static get all() {\r\n        return ['HTML&CSS', 'JavaScript-Basics', 'JavaScript-Advanced', 'NodeJS', 'Databases', 'React', 'FinalProject'];\r\n    }\r\n\r\n    static isExist(course) {\r\n        return this.all.includes(course);\r\n    }\r\n}\r\n","import {Contact} from \"./Contact\";\nimport {Courses} from \"./Courses\";\n\nexport class Student extends Contact {\n    /**\n     * create a new student\n     * @param {String} name - contact name (required)\n     * @param {String} phone - at least 8 characters\n     */\n    constructor(name, phone) {\n        super(name, phone);\n        this.progress = 0;\n        this.courses = [];\n    }\n\n    /**\n     * add the courses the students has taken\n     * @param {String|String[]} course\n     */\n    addCourses(...course) {\n        course.forEach(course => {\n            if (Courses.isExist(course)) {\n                if (this.courses.includes(course)) {\n                    throw `${course} is already added to ${this.name}`;\n                } else {\n                    // add the course\n                    this.courses.push(course);\n                }\n            } else {\n                throw `Error: the course ${course} is not valid! `;\n            }\n        });\n    }\n\n    /**\n     * count and return student progress\n     * @returns {number}\n     */\n    countProgress() {\n        return Math.round((this.courses.length / Courses.all.length) * 100);\n    }\n}","import {Contact} from \"./Contact\";\nimport {Courses} from \"./Courses\";\n\nexport class Teacher extends Contact {\n    /**\n     * teacher\n     * @param {String} name - contact name (required)\n     * @param {String} phone - at least 8 characters\n     * @param {String} course\n     */\n    constructor(name, phone, course) {\n        super(name, phone);\n        if (Courses.isExist(course)) {\n            this.course = course;\n        } else {\n            throw `Error: the course ${course} is not valid! `;\n        }\n        this.students = [];\n    }\n\n    /**\n     * add student to students list of the teacher\n     * @param {Student|Student[]} students\n     */\n    addStudent(...students) {\n        students.forEach(student => {\n            if (this.students.includes(student)) {\n                throw `Error: ${student.name} is already added`;\n            } else {\n                if (student.courses.includes(this.course)) {\n                    this.students.push(student);\n                }\n                else {\n                    throw `Error: the student ${student.name} does not have ${this.course} course, which ${this.name} teach!`;\n                }\n            }\n        });\n    }\n\n    /**\n     * list all the students names for that teacher.\n     */\n    showStudents() {\n        if (this.students.length === 0) {\n            console.log(`${this.name} has no students yet!`);\n        } else {\n            const teacherStudentsNames = this.students.map(s => s.name);\n            console.log(`${this.name} students:\\n ${teacherStudentsNames}\\n`);\n        }\n    }\n}","import {Contact} from \"../libs/Contact\";\r\n\r\nexport class ContactsList {\r\n    constructor() {\r\n        this.list = [];\r\n        this.elementsType = 'contact';\r\n        this.instace = Contact;\r\n    }\r\n\r\n    /**\r\n     * add a new contact to contacts list\r\n     * @param {Contact} contact\r\n     * @returns {number} - last index of inserted item\r\n     */\r\n    add(contact) {\r\n        if (!(contact instanceof this.instace)) {\r\n            throw `Error: ${this.elementsType} must be an instance of ${this.elementsType}`;\r\n        }\r\n        if (this.search(contact.name) !== -1) {\r\n            throw `Error: a ${this.elementsType} with the name ${contact.name} already exists`;\r\n        }\r\n        if (this.search(contact.phone, 'phone') !== -1) {\r\n            throw `Error: a ${this.elementsType} with the phone ${contact.phone} already exists`;\r\n        }\r\n        this.list.push(contact);\r\n        //return this.list.length - 1;\r\n    }\r\n\r\n    /**\r\n     * search for a contact by key (key=name by default)\r\n     * @param {String} value\r\n     * @param {String} key?\r\n     * @returns {number} - index\r\n     */\r\n    search(value, key = 'name') {\r\n        return this.list.findIndex(contact => contact[key] === value);\r\n    }\r\n\r\n    /**\r\n     * delete contact from list by name\r\n     * @param {String} contactName\r\n     */\r\n    delete(contactName) {\r\n        const index = this.search(contactName);\r\n        if (index === -1) {\r\n            throw `Error: Element is not fond in ${this.elementsType} list`;\r\n        }\r\n        else {\r\n            this.list.splice(index, 1);\r\n        }\r\n    }\r\n}","import {Student} from \"../libs/Student\";\r\nimport {ContactsList} from \"./ContactsList\";\r\n\r\nexport class StudentsList extends ContactsList {\r\n    constructor() {\r\n        super();\r\n        this.elementsType = 'student';\r\n        this.instace = Student;\r\n    }\r\n}","import {Teacher} from \"../libs/Teacher\";\r\nimport {ContactsList} from \"./ContactsList\";\r\n\r\nexport class TeachersList extends ContactsList {\r\n    constructor() {\r\n        super();\r\n        this.elementsType = 'teacher';\r\n        this.instace = Teacher;\r\n    }\r\n}","import {TeachersList} from './TeachersList';\r\nimport {Teacher} from \"../libs/Teacher\";\r\nimport {StudentsList} from \"./StudentsList\";\r\nimport {Student} from \"../libs/Student\";\r\nimport {Courses} from \"../libs/Courses\";\r\n\r\n// ----------------------------------------------------\r\n// list of teachers\r\nlet teachers = new TeachersList();\r\n\r\n// list of students\r\nlet students = new StudentsList();\r\n\r\n// ----------------------------------------------------\r\n/**\r\n * fill the teachers table with some teachers\r\n * @param {Teacher[]} teachersArray\r\n */\r\nexport function insertIntoTeachersTable(teachersArray) {\r\n    teachersArray.forEach(teacher => {\r\n        teachers.add(teacher);\r\n        renderTeacher(teacher);\r\n    });\r\n}\r\n\r\n// ----------------------------------------------------\r\n/**\r\n * fill the table of students with studentsArray\r\n * @param {Student[]} studentsArray\r\n */\r\nexport function insertIntoStudentsTable(studentsArray) {\r\n    studentsArray.forEach(student => {\r\n        students.add(student);\r\n        renderStudent(student);\r\n    });\r\n}\r\n\r\n// ----------------------------------------------------\r\n\r\n/**\r\n * fill list of courses with courses\r\n * @param {String[]} courses\r\n */\r\nexport const renderCoursesDropDownMenu = (courses) => {\r\n    let coursesList = ``;\r\n    courses.forEach(course => {\r\n        coursesList += `<option>${course}</option>`;\r\n    });\r\n    document.querySelector('#teacherCourseList').innerHTML = coursesList;\r\n};\r\n\r\n// ----------------------------------------------------\r\n/**\r\n * remove contact (student/teacher) from table and list\r\n */\r\nfunction removeContact() {\r\n    const contactType = this.dataset.contact;\r\n    try {\r\n        // remove tr element from table\r\n        const contactTableRow = this.parentNode.parentNode;\r\n        contactTableRow.remove();\r\n\r\n        // remove object from the list\r\n        switch (contactType) {\r\n            case 'teacher':\r\n                teachers.delete(this.dataset.name);\r\n                break;\r\n            case 'student':\r\n                students.delete(this.dataset.name);\r\n                const studentName = this.dataset.name;\r\n\r\n                // remove <li> elements which contains the deleted student name\r\n                // TODO: remove student also from teacher students list\r\n                document.querySelectorAll('li').forEach(item => {\r\n                    if (item.innerHTML === studentName)\r\n                        item.remove();\r\n                });\r\n                break;\r\n        }\r\n    } catch (error) {\r\n        alert(error);\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------\r\n/**\r\n * get student or teacher object by passing the name and type\r\n * @param {String} contactName - student name or teacher name\r\n * @param {String}contactType - \"student\" or \"teacher\"\r\n * @returns {Student|Teacher}\r\n */\r\nconst getContactObjectByName = (contactName, contactType) => {\r\n    if (contactType === 'teacher') {\r\n        const index = teachers.search(contactName);\r\n        return teachers.list[index];\r\n    }\r\n    if (contactType === 'student') {\r\n        const index = students.search(contactName);\r\n        return students.list[index];\r\n    }\r\n\r\n};\r\n\r\n// ----------------------------------------------------\r\n/**\r\n * get students that have the same course that a teacher teach and not added before to his students list\r\n * @param {Teacher} teacher\r\n * @returns {String[]}\r\n */\r\nconst getPotentialStudents = teacher => {\r\n    return students.list\r\n        .filter(student => student.courses.includes(teacher.course))\r\n        .map(student => student.name)\r\n        .filter(student => !(teacher.students.map(student => student.name)).includes(student));\r\n};\r\n// ----------------------------------------------------\r\n/**\r\n * create a list of checkbox buttons of students\r\n * @param {String[]} students\r\n * @param {String} teacherName\r\n * @returns {string}\r\n */\r\nconst createStudentsCheckBoxes = (students, teacherName) => {\r\n    let studentsCheckBoxes = '';\r\n    students.forEach((student, index) => {\r\n        studentsCheckBoxes += `\r\n                <div class=\"custom-control custom-checkbox\">\r\n                  <input type=\"checkbox\" class=\"custom-control-input\" \r\n                  data-teacher=\"${teacherName}\" data-student=\"${student}\" \r\n                  name=\"teacherStudents\" id=\"student-${index}\">\r\n                  <label class=\"custom-control-label\" for=\"student-${index}\">${student}</label>\r\n                </div>\r\n            `;\r\n    });\r\n    return studentsCheckBoxes;\r\n};\r\n// ----------------------------------------------------\r\n/**\r\n * when click on +student(s) button, show add teacher students dialog\r\n * @param {Element} addStudentsButton\r\n */\r\nconst renderAddTeacherStudents = addStudentsButton => {\r\n    const errorsDiv = document.querySelector('#teacherStudentsErrors');\r\n    const teacherStudentsList = document.querySelector('#teacherStudentsList');\r\n    const saveTeacherStudentsBtn = document.querySelector('#saveTeacherStudents');\r\n    addStudentsButton.addEventListener('click', function () {\r\n        errorsDiv.innerHTML = '';\r\n        teacherStudentsList.innerHTML = '';\r\n        saveTeacherStudentsBtn.dataset.teacher = this.dataset.teacher;\r\n        const teacher = getContactObjectByName(this.dataset.teacher, 'teacher');\r\n        const studentsNotAdded = getPotentialStudents(teacher);\r\n        const studentsCheckBoxes = createStudentsCheckBoxes(studentsNotAdded, teacher.name);\r\n        if (studentsNotAdded.length === 0) {\r\n            errorsDiv.innerHTML = `All students who have <b>${teacher.course}</b> \r\n                                     have already joined the <b>${teacher.name}</b> class  `;\r\n        } else {\r\n            errorsDiv.innerHTML = '';\r\n            teacherStudentsList.innerHTML = studentsCheckBoxes;\r\n            $('#teacherStudentsModal').modal('hide');\r\n        }\r\n    })\r\n};\r\n// ----------------------------------------------------\r\n/**\r\n * get courses checkboxes which appears after click on add courses to student\r\n * @param {String[]} courses\r\n * @param {String} studentName\r\n * @returns {string}\r\n */\r\nconst getCoursesCheckBoxes = (courses, studentName) => {\r\n    let coursesCheckBoxes = '';\r\n    courses.forEach((course, index) => {\r\n        coursesCheckBoxes += `\r\n            <div class=\"custom-control custom-checkbox\">\r\n              <input type=\"checkbox\" class=\"custom-control-input\" \r\n              data-course=\"${course}\" data-student=\"${studentName}\" \r\n              name=\"studentCourses\" id=\"course-${index}\">\r\n              <label class=\"custom-control-label\" for=\"course-${index}\">${course}</label>\r\n            </div>`;\r\n    });\r\n    return coursesCheckBoxes;\r\n};\r\n// ----------------------------------------------------\r\n/**\r\n * render courses that not taken in +courses(s) form\r\n * @param {Element} addCoursesButton\r\n */\r\nconst renderAddStudentCourses = addCoursesButton => {\r\n    const studentCoursesList = document.querySelector('#studentCoursesList');\r\n    const errorsDiv = document.querySelector('#studentCoursesListErrors');\r\n    const saveStudentCoursesBtn = document.querySelector('#saveStudentCourses');\r\n    addCoursesButton.addEventListener('click', function () {\r\n        studentCoursesList.innerHTML = '';\r\n        errorsDiv.innerHTML = '';\r\n        saveStudentCoursesBtn.dataset.student = this.dataset.student;\r\n        const student = getContactObjectByName(this.dataset.student, 'student');\r\n        const coursesNotAdded = Courses.all.filter(course => !student.courses.includes(course));\r\n        const courses = getCoursesCheckBoxes(coursesNotAdded, student.name);\r\n        if (coursesNotAdded.length === 0) {\r\n            errorsDiv.innerHTML = `${student.name} has finished all courses.`;\r\n        } else {\r\n            studentCoursesList.innerHTML = courses;\r\n        }\r\n    })\r\n};\r\n\r\n// ----------------------------------------------------\r\n\r\n/**\r\n * Event listener for click on save teacher students button\r\n */\r\ndocument.querySelector('#saveTeacherStudents').addEventListener('click', saveTeacherStudents);\r\n\r\nfunction saveTeacherStudents() {\r\n    const errorsDiv = document.querySelector('#teacherStudentsErrors');\r\n    errorsDiv.innerHTML = ``;\r\n    let selectedStudents = [];\r\n    const teacher = getContactObjectByName(this.dataset.teacher, 'teacher');\r\n\r\n    // get selected students\r\n    document.querySelectorAll('input[name=teacherStudents]').forEach(checkbox => {\r\n        if (checkbox.checked) {\r\n            const student = getContactObjectByName(checkbox.dataset.student, 'student');\r\n            // push selected student to selected students array\r\n            selectedStudents.push(student);\r\n        }\r\n    });\r\n\r\n    if (selectedStudents.length) {\r\n        teacher.addStudent(...selectedStudents);\r\n        renderTeacherStudents(teacher);\r\n        $('#teacherStudentsModal').modal('hide');\r\n    } else {\r\n        errorsDiv.innerHTML = `You didn't selected any student!`;\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------\r\n/**\r\n * listen to save student courses button clicks, then add selected courses to student\r\n */\r\ndocument.querySelector('#saveStudentCourses').addEventListener('click', saveStudentCourses);\r\n\r\nfunction saveStudentCourses() {\r\n    const errorsDiv = document.querySelector('#studentCoursesListErrors');\r\n    const studentCoursesList = document.querySelector('#studentCoursesList');\r\n    // clear errors div\r\n    errorsDiv.innerHTML = ``;\r\n    let selectedCourses = [];\r\n    const student = getContactObjectByName(this.dataset.student, 'student');\r\n\r\n    // get selected subjects\r\n    document.querySelectorAll('input[name=studentCourses]').forEach(checkbox => {\r\n        if (checkbox.checked) {\r\n            const course = checkbox.dataset.course;\r\n            // push selected student to selected students array\r\n            selectedCourses.push(course);\r\n        }\r\n    });\r\n    if (selectedCourses.length) {\r\n        student.addCourses(...selectedCourses);\r\n        studentCoursesList.innerHTML = '';\r\n        renderStudentCourses(student);\r\n        renderStudentProgress(student);\r\n        $('#studentCoursesModal').modal('hide');\r\n    } else {\r\n        errorsDiv.innerHTML = `You didn't selected any course!`;\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------\r\n/**\r\n * after adding new courses, update progress bar\r\n * @param {Student} student\r\n */\r\nconst renderStudentProgress = student => {\r\n    const progress = student.countProgress();\r\n    document.querySelector(`[data-progressstudent=\"${student.name}\"]`).innerHTML =\r\n        ` <div class=\"progress-bar bg-primary\" role=\"progressbar\" \r\n            style=\"width: ${progress}%\" \r\n            aria-valuenow=\"${progress}\" aria-valuemin=\"0\" aria-valuemax=\"100\">\r\n            ${progress} %\r\n          </div>`;\r\n};\r\n// ----------------------------------------------------\r\n/**\r\n * refresh student ul after adding courses\r\n * @param {Student} student\r\n */\r\nconst renderStudentCourses = student => {\r\n    const studentCourses = student.courses.map(course => `<li>${course}</li>`);\r\n    document.querySelector(`[data-rowstudents='${student.name}'] #studentCourses`)\r\n        .innerHTML = studentCourses.join('');\r\n};\r\n// ----------------------------------------------------\r\n/**\r\n * re-render teacher students after selecting new students\r\n * @param {Teacher} teacher\r\n */\r\nconst renderTeacherStudents = teacher => {\r\n    const teacherStudents = teacher.students.map(student => `<li>${student.name}</li>`);\r\n    document.querySelector(`[data-rowteacher='${teacher.name}'] .teacherStudents`)\r\n        .innerHTML = teacherStudents.join('');\r\n};\r\n\r\n// ----------------------------------------------------\r\n/**\r\n * Add new row for teachers table, contains teacher name, phone, and course that he/she teach.{String}\r\n * @param {Teacher} teacher\r\n */\r\nconst renderTeacher = teacher => {\r\n    const students = teacher.students.map(student => `<li>${student.name}</li>`);\r\n    const tr = document.createElement('tr');\r\n    tr.setAttribute('data-rowteacher', `${teacher.name}`);\r\n    tr.innerHTML = `\r\n                <td>\r\n                    <p class=\"mb-1\"><i class=\"ti-user\"></i> ${teacher.name}</p>\r\n                    <p class=\"mb-1\"><i class=\"ti-mobile\"></i> ${teacher.phone}</p>\r\n                </td>\r\n                <td>${teacher.course}</td>\r\n                <td>\r\n                    <a href=\"#\" data-toggle=\"modal\" data-target=\"#teacherStudentsModal\"\r\n                        data-teacher=\"${teacher.name}\" class=\"btn btn-sm btn-outline-dark ripple ml-4 addTeacherStudents\">\r\n                        <i class=\"ti-plus\"></i> student(s)</a>\r\n                    <ul class=\"teacherStudents\">${students.join('')}</ul>\r\n                </td>\r\n                <td>\r\n                    <span data-contact=\"teacher\" data-name=\"${teacher.name}\" class=\"btn btn-sm btn-danger removeTeacher\">\r\n                    <i class=\"ti-trash\"></i></span>\r\n                </td>\r\n                `;\r\n\r\n    document.querySelector('#teachersTable>tbody').appendChild(tr);\r\n    tr.querySelectorAll('.removeTeacher').forEach(button => {\r\n        button.addEventListener('click', removeContact);\r\n    });\r\n    tr.querySelectorAll('.addTeacherStudents').forEach(renderAddTeacherStudents);\r\n};\r\n\r\n// ----------------------------------------------------\r\n/**\r\n * add row to students table, contains passed student\r\n * @param {Student} student\r\n */\r\nconst renderStudent = student => {\r\n    const courses = student.courses.map(course => `<li>${course}</li>`);\r\n    let tr = document.createElement('tr');\r\n    tr.setAttribute('data-rowstudents', `${student.name}`);\r\n    tr.innerHTML = `\r\n                <td>\r\n                    <p class=\"mb-1\"><i class=\"ti-user\"></i> ${student.name}</p>\r\n                    <p class=\"mb-1\"><i class=\"ti-mobile\"></i> ${student.phone}</p>\r\n                </td>\r\n                <td>\r\n                <a href=\"#\" data-student=\"${student.name}\"\r\n                data-toggle=\"modal\" data-target=\"#studentCoursesModal\"\r\n                class=\"btn btn-sm btn-outline-dark ripple ml-4 addStudentCourses\">\r\n                        <i class=\"ti-plus\"></i> course(s)</a>\r\n                    <ul id=\"studentCourses\">${courses.join('')}</ul>\r\n                    \r\n                    <div data-progressstudent=\"${student.name}\" class=\"progress\">\r\n                      <div class=\"progress-bar bg-primary\" role=\"progressbar\" \r\n                        style=\"width: ${student.countProgress()}%\" \r\n                        aria-valuenow=\"${student.countProgress()}\" aria-valuemin=\"0\" aria-valuemax=\"100\">\r\n                        ${student.countProgress()} %\r\n                      </div>\r\n                    </div>\r\n                    \r\n                </td>\r\n                <td>\r\n                    <span data-contact=\"student\" data-name=\"${student.name}\" class=\"btn btn-sm btn-danger ripple deleteStudent\">\r\n                    <i class=\"ti-trash\"></i></span>\r\n                </td>\r\n                `;\r\n\r\n    document.querySelector('#studentsTable>tbody').appendChild(tr);\r\n    tr.querySelectorAll('.deleteStudent').forEach(button => {\r\n        button.addEventListener('click', removeContact);\r\n    });\r\n    tr.querySelectorAll('.addStudentCourses').forEach(renderAddStudentCourses);\r\n};\r\n\r\n// ----------------------------------------------------\r\n/**\r\n * Listen to Save teacher button, then add New teacher\r\n */\r\n// listen to save teacher button\r\ndocument.querySelector('#save-teacher-button').addEventListener('click', saveTeacher);\r\n\r\nfunction saveTeacher() {\r\n    // get teacher name, phone, course\r\n    const teacherName = document.querySelector('#teacher-name').value.trim();\r\n    const teacherPhone = document.querySelector('#teacher-phone').value.trim();\r\n    const optionsMenu = document.querySelector('#teacherCourseList');\r\n    const course = optionsMenu.options[optionsMenu.selectedIndex].text;\r\n    // helper elements (to view errors messages)\r\n    const teacherNameHelp = document.querySelector('#teacherNameHelp');\r\n    const teacherMobileHelp = document.querySelector('#teacherMobileHelp');\r\n    const addNewTeacherErrors = document.querySelector('#addNewTeacherErrors');\r\n    // to clear error messages if there is a message\r\n    teacherNameHelp.innerHTML = '';\r\n    teacherMobileHelp.innerHTML = '';\r\n    addNewTeacherErrors.innerHTML = '';\r\n    // default variable for errors\r\n    let error = false;\r\n    if (teacherName <= 1) {\r\n        teacherNameHelp.innerHTML = 'teacher name is empty or too short!';\r\n        error = true;\r\n    }\r\n    if (teacherPhone < 8) {\r\n        teacherMobileHelp.innerHTML = 'teacher phone must be at least 8 characters';\r\n        error = true;\r\n    }\r\n    if (!error) {\r\n        try {\r\n            const teacher = new Teacher(teacherName, teacherPhone, course);\r\n            teachers.add(teacher);\r\n            renderTeacher(teacher);\r\n            $('#teacherModal').modal('hide');\r\n        } catch (error) {\r\n            addNewTeacherErrors.innerHTML = error;\r\n        }\r\n    }\r\n}\r\n\r\n// ----------------------------------------------------\r\n/**\r\n * Listen to Save student button, then add New student\r\n */\r\n\r\n// listen to save student button\r\ndocument.querySelector('#saveStudent').addEventListener('click', saveStudent);\r\n\r\nfunction saveStudent() {\r\n// get student name, phone\r\n    const studentName = document.querySelector('#student-name').value.trim();\r\n    const studentPhone = document.querySelector('#student-phone').value.trim();\r\n// helper elements (to view errors messages)\r\n    const studentNameHelp = document.querySelector('#studentNameHelp');\r\n    const studentMobileHelp = document.querySelector('#studentMobileHelp');\r\n    const addNewStudentErrors = document.querySelector('#addNewStudentErrors');\r\n// to clear error messages if there is a message\r\n    studentNameHelp.innerHTML = '';\r\n    studentMobileHelp.innerHTML = '';\r\n    addNewStudentErrors.innerHTML = '';\r\n// default variable for errors\r\n    let error = false;\r\n    if (studentName <= 1) {\r\n        studentNameHelp.innerHTML = 'student name is empty or too short!';\r\n        error = true;\r\n    }\r\n    if (studentPhone < 8) {\r\n        studentMobileHelp.innerHTML = 'student phone must be at least 8 characters';\r\n        error = true;\r\n    }\r\n    if (!error) {\r\n        try {\r\n            const student = new Student(studentName, studentPhone);\r\n            students.add(student);\r\n            renderStudent(student);\r\n        } catch (error) {\r\n            addNewStudentErrors.innerHTML = error;\r\n        }\r\n    }\r\n}\r\n"],"sourceRoot":""}